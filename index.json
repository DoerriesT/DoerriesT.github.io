[{"authors":null,"categories":null,"content":"Hi, my name is Tim. I am passionate about real-time graphics programming, and like to learn about and implement new real-time rendering techniques that further push the performance and realism of virtual scenes. Initially, my real-time rendering journey started with OpenGL 3.3 and OpenGL 4.5, but since then I have come to enjoy working closer to the hardware with modern APIs such as Vulkan and DirectX 12. Recently I finished my masters thesis in Computer Science at Trier University of Applied Sciences. Currently I am employed at skilltree GmbH and am responsible for designing, implementing and maintaining a DirectX 12 renderer for one of our products.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Hi, my name is Tim. I am passionate about real-time graphics programming, and like to learn about and implement new real-time rendering techniques that further push the performance and realism of virtual scenes.","tags":null,"title":"Tim Dörries","type":"authors"},{"authors":["Tim Dörries"],"categories":[],"content":"","date":1602021600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602021600,"objectID":"4d265e8f7e787e656b6a92e1d7308705","permalink":"https://doerriest.github.io/publication/master/","publishdate":"2021-05-29T20:24:40+02:00","relpermalink":"/publication/master/","section":"publication","summary":"This masters thesis details the implementation of the popular Volumetric Fog technique for volumetric lighting and expands it with a unified solution for volumetric shadows for both volumes and billboards. Additionally, the checkerboard rendering technique is used reduce the cost of the effect. Written in C++ and Vulkan 1.2.","tags":[],"title":"Real-Time Volumetric Lighting with Volumetric Shadows","type":"publication"},{"authors":["Tim Dörries"],"categories":[],"content":"This is a simple pathtracer written in CUDA and C++ featuring procedural shapes (sphere, cylinder, disk, cone paraboloid, quad and cube), different material types (lambertian diffuse, GGX specular), a BVH for accelerating ray-scene intersections, as well as support for simple textured scenes and HDRI environments. See https://github.com/DoerriesT/PathtracerCUDA for more details.\n","date":1598652000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598652000,"objectID":"f11a1ebf9f087ebd5e4421a7baa1ae0f","permalink":"https://doerriest.github.io/project/cudapathtracer/","publishdate":"2020-08-29T00:00:00+02:00","relpermalink":"/project/cudapathtracer/","section":"project","summary":"A simple pathtracer written in C++ and CUDA.","tags":[],"title":"CUDA Pathtracer","type":"project"},{"authors":["Tim Dörries","Peter Berweiler"],"categories":[],"content":"This simple terrain editor is written in TypeScript and uses WebGL 2.0 for visualization. It features multiple different brushes for modifying the height map, painting additional diffuse/albedo maps, as well as placing trees (whose positions can be exported as a JSON file). The main feature is the erosion system (featuring a shallow water simulation for small rivers), which is an implementation of the technique proposed in \u0026ldquo;Fast Hydraulic Erosion Simulation and Visualization on GPU\u0026rdquo; by Mei et al. (2007). The project was created in collaboration with Peter Berweiler. Peter implemented most of the TypeScript related functionality and did most of the brushes. All the rendering aspects of the application were my responsibility. The erosion system was prototyped by Peter and later fully implemented by me.\nYou can try out a live demo at: https://peterberweiler.github.io/ITA-Project/\n","date":1579557600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579557600,"objectID":"b76523e3c4c59e36b9cd9594d148d1b3","permalink":"https://doerriest.github.io/project/terrain-editor/","publishdate":"2020-01-21T00:00:00+02:00","relpermalink":"/project/terrain-editor/","section":"project","summary":"A simple terrain editor for creating height maps written in TypeScript and WebGL 2.0.","tags":[],"title":"Terrain Editor","type":"project"},{"authors":["Tim Dörries"],"categories":[],"content":"This is an implementation of the Separable Subsurface Scattering technique from http://www.iryoku.com/separable-sss/ in C++ and Vulkan 1.0. Additionally this demo features physically-based shading, image-based lighting, shadow mapping and temporal anti-aliasing. See https://github.com/DoerriesT/Separable-Subsurface-Scattering-Demo for more details.\n","date":1566770400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566770400,"objectID":"419ab415322601a0c92edcaf0d9e3e34","permalink":"https://doerriest.github.io/project/subsurface-scattering/","publishdate":"2019-08-26T00:00:00+02:00","relpermalink":"/project/subsurface-scattering/","section":"project","summary":"Implementation of the Separable Subsurface Scattering technique from http://www.iryoku.com/separable-sss/ in C++ and Vulkan 1.0 ","tags":[],"title":"Separable Subsurface Scattering","type":"project"},{"authors":["Tim Dörries"],"categories":[],"content":"","date":1542232800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542232800,"objectID":"9cc1eccf525744232b08e8ff6d3dd5ea","permalink":"https://doerriest.github.io/publication/bachelor/","publishdate":"2021-05-29T20:03:05+02:00","relpermalink":"/publication/bachelor/","section":"publication","summary":"For this bachelors thesis, different techniques for image-based post-processing effects (depth of field, motion blur and SSAO) were implemented, evaluated and compared against one another to give an overview of the field and guidance for choosing a suitable technique for a given effect. Written in C++ and OpenGL 4.5.","tags":[],"title":"State of the Art in Image-Based Post-Processing Effects","type":"publication"},{"authors":["Tim Dörries"],"categories":[],"content":"A proof of concept tool for painting textures in 3D. Uses Qt for the GUI and OpenGL for rendering the viewport. The tool allows to paint albedo, metallic, roughness, ambient occlusion, emissive and displacement maps. The painting works by writing out the UVs of the rendered model to a render target and reading back the values hovered by the mouse. These UV values are then used to draw line segments into the currently selected texture. The line segments are implemented as a series of splatted quads with an alpha falloff to simulate smooth lines.\n","date":1535580000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535580000,"objectID":"156ea33665c38c0993d06551e5f08208","permalink":"https://doerriest.github.io/project/meshpainter/","publishdate":"2018-08-30T00:00:00+02:00","relpermalink":"/project/meshpainter/","section":"project","summary":"A proof of concept tool for painting textures in 3D. Uses Qt for the GUI and OpenGL for rendering the viewport.","tags":[],"title":"Mesh Painter","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://doerriest.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]